package pingpong.model;

signal StartPlaying;
signal PingSignal;
signal PongSignal;

interface PingPongInf {
	reception PingSignal;
        reception PongSignal;
}

interface StartInf {
	reception StartPlaying;
}


class Player {
	
	private String name;
	int accept;
	public Player(String name) {
		this.name = name;
		accept = 0;
	}
	
	initial Init;
	state Waiting;
	state Playing;
	state EndGame;
	
	behavior port PingPongPort {
		provided PingPongInf;
	        required PingPongInf;
	}
	
	behavior port StarterPort {
		provided StartInf;
	}
	
    transition Initialize {	                
		from Init;
		to Waiting;		
	}
	
		transition Starting {
		from Waiting;
		to Playing;
		trigger StartPlaying;
		port StarterPort;
		effect {
			log(name + " player start playing");
			send new PingSignal() to this->(PingPongPort);
		}
	}
	
	transition RecivePPing {
		from Playing;
		to Playing;
		port PingPongPort;
		trigger PingSignal;
		effect {
			log (name + " player recived ping");
			send new PongSignal() to this->(PingPongPort);
			accept++;
		}
		guard(accept < 10)
	}
	
	transition DenyPPing {
		from Playing;
		to EndGame;
		port PingPongPort;
		trigger PongSignal;
		effect {
			log (name + " ended game");
			send new PongSignal() to this->(PingPongPort);

		}
		guard(accept >= 10)
	}
	
		transition RecivePPong {
		from Playing;
		to Playing;
		port PingPongPort;
		trigger PongSignal;
		effect {
			log (name + " player recived pong");
			send new PingSignal() to this->(PingPongPort);
			accept++;
		}
		guard(accept < 10)
	}
	
		transition DenyPPong {
		from Playing;
		to EndGame;
		port PingPongPort;
		trigger PongSignal;
		effect {
			log (name + " ended game");
			send new PingSignal() to this->(PingPongPort);
			accept++;
		}
		guard(accept >= 10)
	}
	
		transition ReciveWPing {
		from Waiting;
		to Playing;
		port PingPongPort;
		trigger PingSignal;
		effect {
			log (name + " player recived ping");
			send new PongSignal() to this->(PingPongPort);
		}
	}
	
		transition ReciveWPong {
		from Waiting;
		to Playing;
		port PingPongPort;
		trigger PongSignal;
		effect {
			log (name + " player recived pong");
			send new PingSignal() to this->(PingPongPort);
		}
	}
		
		            
}

class Table {
	port StarterPort {
		provided StartInf;
	}
	
	public Table() {
		 Player player1 = new Player("Player1");
		 Player player2 = new Player("Player2");
		 link(TableComposite.table, this, TableComposite.player, player1);
		 link(TableComposite.table, this, TableComposite.player, player2);
		 
		 connect (PlayerConnect.player1, player1->(Player.PingPongPort),
				  PlayerConnect.player2, player2->(Player.PingPongPort));
				  
		 connect ( this->(Table.StarterPort), TablePlayerConnect.player,
				   player1->(Player.StarterPort));
		 
		 start(player1);
		 start(player2);
	}
}

class Judge {
	port StarterPort {
		required StartInf;
	}
	
	initial Init;
	state Working;
	
	transition Initialize {
		from Init;
		to Working;
		effect {
			send new StartPlaying() to this->(StarterPort);
		}
	}
}

class PingPongMatch {
	public PingPongMatch() {
		Judge judge = new Judge ();
		Table table = new Table ();
		 link(MatchTableComposite.match, this, MatchTableComposite.table, table);
		 link(MatchJudgeComposite.match, this, MatchJudgeComposite.judge, judge);
				  
		connect (JudgeTableConnect.table, table->(Table.StarterPort),
				  JudgeTableConnect.judge, judge->(Judge.StarterPort));
				  
		start(table);
		start(judge);
	}
}

composition TableComposite {
	hidden container Table table;
	* Player player;
}

composition MatchTableComposite {
	hidden container PingPongMatch match;
	1 Table table;
}

composition MatchJudgeComposite {
	hidden container PingPongMatch match;
	1 Judge judge;
}

connector PlayerConnect {
	TableComposite.player->Player.PingPongPort player1;
	TableComposite.player->Player.PingPongPort player2;   
}

connector JudgeTableConnect {
	MatchTableComposite.table->Table.StarterPort table;
	MatchJudgeComposite.judge->Judge.StarterPort judge;   
}


delegation TablePlayerConnect {
	TableComposite.table->Table.StarterPort table;
	TableComposite.player->Player.StarterPort player;
}



	
