// Assoc.cpp : Defines the entry point for the console application.
//

#include "stdafx.h"
#include <assert.h>
#include <map>
#include <list>

enum  RoleDescriptor {
	LeftRole,
	RigthRole
};

//template<typename LeftClassType, typename RigthClassType>


template<class LeftClassRoleName, class RigthClassRoleName>
class AssociationNN {
public:
	template<class FirstRoleName, class SecondRoleName>
	void link (typename FirstRoleName::RoleType* first, typename SecondRoleName::RoleType* second) {
		assert (false);
	}


	template<>
	void link<LeftClassRoleName, RigthClassRoleName> (typename LeftClassRoleName::RoleType* first, typename RigthClassRoleName::RoleType* second) {
		LeftRoleTable[first].push_back (second);
		RigthRoleTable[second].push_back (first);
	}


	template<>
	void link<RigthClassRoleName, LeftClassRoleName> (typename RigthClassRoleName::RoleType* first, typename LeftClassRoleName::RoleType* second) {
		LeftRoleTable[second].push_back (first);
		RigthRoleTable[first].push_back (second);
	}

	
	/*template<int role>
	std::list<RigthClassType*> get (LeftClassType* left) {
		assert (role == LeftRoleEnum || role == RigthRoleEnum);
		return LeftRoleTable[left];
	}*/
	
	/*std::list<LeftClassType*> get (RigthClassType* rigth) {
		return RigthRoleTable[rigth];
	}*/

private:
	std::map<typename LeftClassRoleName::RoleType*, std::list<typename RigthClassRoleName::RoleType*>> LeftRoleTable;
	std::map<typename RigthClassRoleName::RoleType*, std::list<typename LeftClassRoleName::RoleType*>> RigthRoleTable;
	
};

//template<>
//AssociationNN::link<LeftClassRoleName, RigthClassRoleName> (typename LeftClassRoleName::RoleType* first, typename RigthClassRoleName::RoleType* second) {
//
//}


class A {
public:
	int id;
};

struct ARoleStruct {
	struct a1 {
		typedef A RoleType;
	};
	struct a2 {
		typedef A RoleType;
	};


};

int main()
{
	AssociationNN<typename ARoleStruct::a1, typename ARoleStruct::a2> aAssoc;
	A a1;
	a1.id = 1;
	A a2;
	a2.id = 2;


	aAssoc.link<ARoleStruct::a1, ARoleStruct::a2> (&a1, &a2);

	/*std::list<A*> rigthObjectsA1 = aAssoc.get<RigthRole> (&a1);
	std::list<A*> leftObjectsA1 = aAssoc.get<LeftRole> (&a1);
	std::list<A*> rigthObjectsA2 = aAssoc.get<RigthRole> (&a2);
	std::list<A*> leftObjectsA2 = aAssoc.get<LeftRole> (&a2);*/


    return 0;
}

